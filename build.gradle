plugins {
    id 'fabric-loom' version '1.10.5' // Changed from 1.10-SNAPSHOT to match logs
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "minmod" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runs {
        client {
            // Skip all authentication for development
            programArgs "--username", "DevUser", "--uuid", "00000000-0000-0000-0000-000000000000", "--accessToken", "0"
            vmArg "-Dfabric.skipAuth=true"
            vmArg "-Dfabric.skipAuthLib=true"
            vmArg "-DignoreProfileCredentials=true"
            vmArg "-DuserProperties.file=/dev/null"
            property "fabric.development", "true"
            // Ensure client() is called if you intend to run the client environment specifically
            // client() // This was in a previous suggestion, ensure it's present if needed for your run config
        }
        server {
            property "fabric.development", "true"
            // server() // Similarly, ensure server() is called if needed
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {
    maven { url = uri("https://maven.fabricmc.net/") }
    mavenCentral()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API - This single dependency should pull in all necessary sub-modules
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

// Add a task to notify about fabric-loom deprecation warnings
tasks.register('fabricLoomDeprecationInfo') {
    doLast {
        println """
        |==========================================================================
        | NOTICE: Fabric-Loom Plugin Deprecation Warnings
        |==========================================================================
        | If you still see deprecation warnings, they are likely coming from 
        | inside the fabric-loom plugin itself.
        |
        | These cannot be fixed directly in your build script.
        |
        | Options to resolve:
        | 1. Run Gradle with -Dorg.gradle.warning.mode=none to suppress all warnings
        | 2. Report the issue to the fabric-loom maintainers at:
        |    https://github.com/FabricMC/fabric-loom/issues
        |==========================================================================
        """.stripMargin()
    }
}

// Make sure this task runs during build
tasks.named('classes').configure {
    finalizedBy 'fabricLoomDeprecationInfo'
}